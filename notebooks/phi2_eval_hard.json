{"prompt": ["### Task\nGenerate a SQL query to answer the following question:\n`What is the maximum and minimum grade point of students who live in NYC?`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE ENROLLED_IN (Grade VARCHAR, StuID VARCHAR); CREATE TABLE STUDENT (city_code VARCHAR, StuID VARCHAR); CREATE TABLE GRADECONVERSION (gradepoint INTEGER, lettergrade VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `What is the maximum and minimum grade point of students who live in NYC?`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`What are the names of nations where both English and French are official languages?`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR, IsOfficial VARCHAR); CREATE TABLE country (Name VARCHAR, Code VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `What are the names of nations where both English and French are official languages?`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Please show the names of aircrafts associated with airport with name \"London Gatwick\".`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE airport (Airport_ID VARCHAR, Airport_Name VARCHAR); CREATE TABLE aircraft (Aircraft VARCHAR, Aircraft_ID VARCHAR); CREATE TABLE airport_aircraft (Aircraft_ID VARCHAR, Airport_ID VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Please show the names of aircrafts associated with airport with name \"London Gatwick\".`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Find the names and phone numbers of customers living in California state.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE addresses (address_id VARCHAR, state_province_county VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Find the names and phone numbers of customers living in California state.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`What are the titles and directors of the films were never presented in China?`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE film (title VARCHAR, director VARCHAR, film_id VARCHAR, country VARCHAR); CREATE TABLE market (Market_ID VARCHAR); CREATE TABLE film_market_estimation (market_id VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `What are the titles and directors of the films were never presented in China?`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`What are the region names affected by the storm with a number of deaths of least 10?`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE storm (storm_id VARCHAR, number_deaths VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `What are the region names affected by the storm with a number of deaths of least 10?`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`List the name and phone number of all suppliers in the alphabetical order of their addresses.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE addresses (address_id VARCHAR, address_details VARCHAR); CREATE TABLE supplier_addresses (supplier_id VARCHAR, address_id VARCHAR); CREATE TABLE Suppliers (supplier_name VARCHAR, supplier_phone VARCHAR, supplier_id VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `List the name and phone number of all suppliers in the alphabetical order of their addresses.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Find the last name of the student who has a cat that is age 3.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE student (lname VARCHAR, stuid VARCHAR); CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE pets (petid VARCHAR, pet_age VARCHAR, pettype VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Find the last name of the student who has a cat that is age 3.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Find the names of the trains that do not pass any station located in London.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE station (station_id VARCHAR); CREATE TABLE train_station (station_id VARCHAR); CREATE TABLE train_station (train_id VARCHAR, station_id VARCHAR); CREATE TABLE train (name VARCHAR, train_id VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Find the names of the trains that do not pass any station located in London.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Find the number of students who is older than 20 in each dorm.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE dorm (dorm_name VARCHAR, dormid VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE student (stuid VARCHAR, age INTEGER)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Find the number of students who is older than 20 in each dorm.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`List the name of tracks belongs to genre Rock or media type is MPEG audio file.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `List the name of tracks belongs to genre Rock or media type is MPEG audio file.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`How many papers are published by the institution \"Tokohu University\"?`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `How many papers are published by the institution \"Tokohu University\"?`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE bank (bname VARCHAR, branch_id VARCHAR); CREATE TABLE customer (cust_id VARCHAR, credit_score INTEGER); CREATE TABLE loan (branch_id VARCHAR, cust_id VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`What is the name of the institution that \"Matthias Blume\" belongs to?`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE inst (name VARCHAR, instid VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `What is the name of the institution that \"Matthias Blume\" belongs to?`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Find the name and salary of instructors who are advisors of the students from the Math department.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE instructor (name VARCHAR, salary VARCHAR, id VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Find the name and salary of instructors who are advisors of the students from the Math department.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Give me a list of names and years of races that had any driver whose forename is Lewis?`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE drivers (driverid VARCHAR, forename VARCHAR); CREATE TABLE races (name VARCHAR, year VARCHAR, raceid VARCHAR); CREATE TABLE results (raceid VARCHAR, driverid VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Give me a list of names and years of races that had any driver whose forename is Lewis?`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Projects (project_id VARCHAR, project_details VARCHAR); CREATE TABLE Project_outcomes (project_id VARCHAR); CREATE TABLE Tasks (task_details VARCHAR, task_id VARCHAR, project_id VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Retrieve the average age of members of the club \"Tennis Club\".`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (age INTEGER, stuid VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Retrieve the average age of members of the club \"Tennis Club\".`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`List the names and phone numbers of all the distinct suppliers who supply red jeans.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE product_suppliers (supplier_id VARCHAR, product_id VARCHAR); CREATE TABLE suppliers (supplier_name VARCHAR, supplier_phone VARCHAR, supplier_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `List the names and phone numbers of all the distinct suppliers who supply red jeans.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Find the name of tracks which are in Movies playlist but not in music playlist.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Find the name of tracks which are in Movies playlist but not in music playlist.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Find the name of the club that has the most female students.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE student (stuid VARCHAR, sex VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubname VARCHAR, clubid VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Find the name of the club that has the most female students.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE scientists (SSN VARCHAR, name VARCHAR); CREATE TABLE projects (hours INTEGER, code VARCHAR); CREATE TABLE assignedto (project VARCHAR, scientist VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE film (title VARCHAR, film_id VARCHAR, rental_rate VARCHAR); CREATE TABLE inventory (film_id VARCHAR); CREATE TABLE film (title VARCHAR, film_id VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`List the names of the customers who have once bought product \"food\".`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE orders (customer_id VARCHAR, order_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE order_items (product_id VARCHAR, order_id VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `List the names of the customers who have once bought product \"food\".`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`What are the names of the tourist attractions that have parking or shopping as their feature details?`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Tourist_Attraction_Features (tourist_attraction_id VARCHAR, Feature_ID VARCHAR); CREATE TABLE Features (Feature_ID VARCHAR, feature_Details VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, tourist_attraction_id VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `What are the names of the tourist attractions that have parking or shopping as their feature details?`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Find the average grade point of student whose last name is Smith.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE ENROLLED_IN (Grade VARCHAR, StuID VARCHAR); CREATE TABLE STUDENT (LName VARCHAR, StuID VARCHAR); CREATE TABLE GRADECONVERSION (gradepoint INTEGER, lettergrade VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Find the average grade point of student whose last name is Smith.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`List all characteristics of product named \"sesame\" with type code \"Grade\".`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, characteristic_id VARCHAR, characteristic_type_code VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `List all characteristics of product named \"sesame\" with type code \"Grade\".`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`What are the names of tourist attraction that Alison visited but Rosalind did not visit?`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE VISITS (Tourist_Attraction_ID VARCHAR, Tourist_ID VARCHAR); CREATE TABLE VISITORS (Tourist_Details VARCHAR, Tourist_ID VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, Tourist_Attraction_ID VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `What are the names of tourist attraction that Alison visited but Rosalind did not visit?`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Find the names of procedures which physician John Wen was trained in.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE trained_in (physician VARCHAR, treatment VARCHAR); CREATE TABLE physician (employeeid VARCHAR, name VARCHAR); CREATE TABLE procedures (name VARCHAR, code VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Find the names of procedures which physician John Wen was trained in.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE accelerator_compatible_browser (browser_id VARCHAR, accelerator_id VARCHAR, compatible_since_year VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR); CREATE TABLE browser (name VARCHAR, id VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Find the names of patients who are not using the medication of Procrastin-X.`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Prescribes (Patient VARCHAR, Medication VARCHAR); CREATE TABLE Medication (Code VARCHAR, name VARCHAR); CREATE TABLE patient (name VARCHAR, SSN VARCHAR); CREATE TABLE patient (name VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Find the names of patients who are not using the medication of Procrastin-X.`:\n```sql", "### Task\nGenerate a SQL query to answer the following question:\n`Show the location name for document \"Robin CV\".`\n\n### Database Schema\nThe query will run on a database with the following schema:\nCREATE TABLE Ref_locations (location_name VARCHAR, location_code VARCHAR); CREATE TABLE All_documents (document_id VARCHAR, document_name VARCHAR); CREATE TABLE Document_locations (document_id VARCHAR, location_code VARCHAR)\n\n### Answer\nGiven the database schema, here is the SQL query that answers `Show the location name for document \"Robin CV\".`:\n```sql"], "pred": ["SELECT MAX(T1.gradepoint), MIN(T1.gradepoint) FROM GRADECONVERSION AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID", "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T", "SELECT T3.Aircraft FROM airport AS T1 JOIN airport_aircraft AS T2 ON T1.Airport_ID = T2.Airport_ID JOIN aircraft AS T3 ON T2.Aircraft_", "SELECT T1.customer_name, T1.customer_phone FROM customers AS T1 JOIN customer_addresses AS T2 ON T1.customer_id = T2.customer_id JOIN addresses", "SELECT title, director FROM film WHERE NOT film_id IN (SELECT T1.market_id FROM market AS T1 JOIN film_market_estimation AS T2 ON T1.Market_ID = T2.market_", "SELECT T3.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T", "SELECT T3.supplier_name, T3.supplier_phone FROM supplier_addresses AS T1 JOIN Addresses AS T2 ON T1.address_id = T2.address_id JOIN Suppl", "SELECT T3.lname FROM pets AS T1 JOIN has_pet AS T2 ON T1.petid = T2.petid JOIN student AS T3 ON T2.stuid = T3.stuid", "SELECT name FROM train WHERE NOT train_id IN (SELECT train_id FROM train_station WHERE station_id IN (SELECT station_id FROM station WHERE city = 'London'))", "SELECT COUNT(*), T1.dorm_name FROM lives_in AS T1 JOIN student AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T1.dorm", "SELECT T3.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T2.media_type_id = T3.", "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T2.aid = T3.aid WHERE T3.name", "SELECT COUNT(*) FROM authorship AS T1 JOIN papers AS T2 ON T1.paperid = T2.paperid JOIN inst AS T3 ON T1.instid = T3.instid WHERE T", "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T2.cust_id = T", "SELECT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T", "SELECT T1.name, T1.salary FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id JOIN student AS T3 ON T2.s_id = T", "SELECT T3.name, T3.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.", "SELECT T1.task_details, T1.task_id, T1.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN", "SELECT AVG(age) FROM student WHERE stuid IN (SELECT stuid FROM member_of_club WHERE clubid = 'Tennis Club') AND NOT stuid IN (SELECT stuid FROM member_of_club WHERE clubid =", "SELECT T1.supplier_name, T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN", "SELECT T3.name FROM playlist_tracks AS T1 JOIN tracks AS T2 ON T1.track_id = T2.id JOIN playlists AS T3 ON T1.playlist_id = T3.", "SELECT T3.clubname FROM member_of_club AS T1 JOIN student AS T2 ON T1.clubid = T2.clubid JOIN club AS T3 ON T1.clubid = T3.", "SELECT SUM(T1.hours) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project JOIN scientists AS T3 ON T2.scientist = T3.SSN WHERE", "SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.rental_rate = \"0.", "SELECT T1.customer_name FROM customers AS T1 JOIN order_items AS T2 ON T1.customer_id = T2.order_id JOIN orders AS T3 ON T2.order_id", "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Features AS T2 ON T1.tourist_attraction_id = T2.Feature_ID JOIN Tourist_Attraction_Features AS", "SELECT AVG(T1.gradepoint) FROM GRADECONVERSION AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID JOIN ENROLLED_IN AS", "SELECT T3.characteristic_name FROM products AS T1 JOIN product_characteristics AS T2 ON T1.product_id = T2.product_id JOIN CHARACTERISTICS AS T3 ON T2", "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attractions AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VIS", "SELECT T1.name FROM procedures AS T1 JOIN trained_in AS T2 ON T1.code = T2.treatment JOIN physician AS T3 ON T3.employeeid = T2.physician WHERE T", "SELECT T3.name FROM accelerator_compatible_browser AS T1 JOIN web_client_accelerator AS T2 ON T1.browser_id = T2.id JOIN browser AS T3 ON T1.ac", "SELECT name FROM patient WHERE NOT SSN IN (SELECT T1.SSN FROM patient AS T1 JOIN Prescribes AS T2 ON T1.name = T2.Patient JOIN Medication AS T3 ON T", "SELECT T1.location_name FROM Ref_locations AS T1 JOIN Document_locations AS T2 ON T1.location_code = T2.location_code JOIN All_documents AS T3 ON T"], "actu": ["SELECT MAX(T2.gradepoint), MIN(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = \"NYC\"", "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"", "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = \"London Gatwick\"", "SELECT t1.customer_name, t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'", "SELECT title, director FROM film WHERE NOT film_id IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id = T2.Market_ID WHERE country = 'China')", "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10", "SELECT T1.supplier_name, T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY T3.address_details", "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'", "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id = T2.train_id WHERE NOT T1.station_id IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id = T4.station_id WHERE t4.location = \"London\")", "SELECT COUNT(*), T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name", "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"", "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Airbus A340-300\"", "SELECT COUNT(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = \"Tokohu University\"", "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100", "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = \"Matthias\" AND t1.lname = \"Blume\"", "SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'", "SELECT T2.name, T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"", "SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis' UNION SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.project_id HAVING COUNT(*) > 2", "SELECT AVG(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"", "SELECT DISTINCT T1.supplier_name, T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = \"red jeans\"", "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'", "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.sex = \"F\" GROUP BY t1.clubname ORDER BY COUNT(*) DESC LIMIT 1", "SELECT SUM(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'", "SELECT title, film_id FROM film WHERE rental_rate = 0.99 INTERSECT SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id HAVING COUNT(*) < 3", "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING COUNT(*) >= 1", "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping'", "SELECT AVG(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = \"Smith\"", "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"sesame\" AND t3.characteristic_type_code = \"Grade\"", "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Rosalind\"", "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"", "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998", "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code WHERE T3.name = 'Procrastin-X'", "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = \"Robin CV\""], "inf_time": [369.075749, 22.400577, 23.1495, 25.789852, 22.486841, 23.409724, 28.112491, 23.778903, 24.323143, 22.84754, 26.3393, 24.19751, 25.125733, 27.278219, 24.712482, 27.958298, 24.949894, 29.766863, 26.139971, 26.357773, 25.539715, 25.132853, 27.295676, 26.744835, 27.157333, 28.914607, 25.160171, 28.502593, 27.298619, 27.024821, 28.127289, 27.748109, 25.061217], "temperature": [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2], "difficulty": ["hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard", "hard"], "token_in": [155, 129, 156, 160, 147, 157, 168, 153, 157, 143, 153, 150, 139, 161, 154, 154, 156, 182, 145, 163, 145, 141, 146, 168, 169, 170, 150, 167, 170, 137, 171, 158, 147], "token_out": [51, 51, 51, 51, 51, 51, 51, 51, 43, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51], "tokens_per_sec": [0.13547354475462978, 2.2320853610154776, 2.1598738633663794, 1.9387470699715532, 2.2235226370836174, 2.1358645663656692, 1.7785688219517795, 2.102704233244065, 1.726750527265329, 2.1884194097045024, 1.8983040551571224, 2.0663283122932894, 1.9899916949686602, 1.8329642415437752, 2.0232690508383575, 1.7883778189931305, 2.004016530090268, 1.6797201639957828, 1.9127794747744749, 1.8969736176117762, 1.957735237061181, 1.9894279411891678, 1.8317919658776722, 1.869519853085652, 1.841123353313081, 1.729229797244002, 1.9872678925751341, 1.7542263610893225, 1.831594484688035, 1.8501510148762872, 1.7776331021450378, 1.801924592410964, 1.9951146027744782]}